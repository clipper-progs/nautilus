#include <clipper/clipper.h>
#include <algorithm>


#include "nautilus-sequence.h"

#include "nautilus-tools.h"


// return fraction of sequenced residues which match
double NucleicAcidSequence::sequence_similarity( const clipper::String& seq1, const clipper::String& seq2 )
{
  int lmin = (seq1.length()<seq2.length()) ? seq1.length() : seq2.length();
  int t1, t2, ns, nm;;
  ns = nm = 0;
  for ( int i = 0; i < lmin; i++ ) {
    t1 = NucleicAcidTools::base_index_translate( seq1[i] );
    t2 = NucleicAcidTools::base_index_translate( seq2[i] );
    if ( t1 >= 0 || t2 >= 0 ) {
      ns++;
      if ( t1 == t2 ) nm++;
    }
  }
  if ( ns == 0 ) return 0.0;
  return ( double(nm) / double(ns) );
}


// calculate RTop to match missing base onto standard orientation
clipper::RTop_orth NucleicAcidSequence::base_rtop( const clipper::MMonomer& mm, const clipper::Xmap<float>& xmap )
{
  // torsions
  const double tors[] = {-3.1, -2.9, -2.8, -2.7, -2.5, -2.2, -2.1, -2.0};
  const int    ntor   = sizeof(tors)/sizeof(tors[0]);

  typedef clipper::Interp_cubic I;

  // build base in default position
  NucleicAcidDB::NucleicAcid na( mm );
  if ( na.flag() == NucleicAcidDB::NucleicAcid::COMPLETE ) {
    std::vector<clipper::Coord_orth> cbest(6);
    double sbest = -1.0e30;
    const clipper::Coord_orth co4 = na.coord_o4();
    const clipper::Coord_orth cc1 = na.coord_c1();
    const clipper::Coord_orth cn1 = na.coord_n();
    clipper::Coord_orth cn3best( cn1 ), cc5best( cn1 );
    for ( int itor = 0; itor < ntor; itor++ ) {
      const clipper::Coord_orth cc2( co4, cc1, cn1, 1.37, 2.03, tors[itor] );
      const clipper::Coord_orth cn3( cc1, cn1, cc2, 1.35, 2.09, 3.142 );
      const clipper::Coord_orth cc4( cn1, cc2, cn3, 1.35, 2.09, 0.0 );
      const clipper::Coord_orth cc5( cc2, cn3, cc4, 1.35, 2.09, 0.0 );
      const clipper::Coord_orth cc6( cn3, cc4, cc5, 1.35, 2.09, 0.0 );
      const float score = ( xmap.interp<I>( xmap.coord_map( cc2 ) ) +
			    xmap.interp<I>( xmap.coord_map( cn3 ) ) +
			    xmap.interp<I>( xmap.coord_map( cc4 ) ) +
			    xmap.interp<I>( xmap.coord_map( cc5 ) ) +
			    xmap.interp<I>( xmap.coord_map( cc6 ) ) );
      if ( score > sbest ) {
        sbest = score;
        cn3best = cn3;
	cc5best = cc5;
      }
    }
    // make rtop
    const clipper::Coord_orth c1 = cc5best - cn1;
    const clipper::Coord_orth c2 = cn3best - cn1;
    const clipper::Vec3<> v1( (c1.unit()+c2.unit()).unit() );
    const clipper::Vec3<> v2( clipper::Vec3<>::cross(c1,c2).unit() );
    const clipper::Vec3<> v3( clipper::Vec3<>::cross(v1,v2).unit() );
    clipper::RTop_orth rtop( clipper::Mat33<>( v1[0], v2[0], v3[0],
					       v1[1], v2[1], v3[1],
					       v1[2], v2[2], v3[2] ), cn1 );
    return rtop;
  }

  return clipper::RTop_orth( clipper::RTop<>::null() );
}


// Score chain positions by base type. Result is a probability.
std::vector<std::vector<double> > NucleicAcidSequence::score( const clipper::Xmap<float>& xmap, std::vector<clipper::RTop_orth>& rtops )
{
  // stats coordinates
  const double scoords[][3] = { {-3.0,-3.0, 1.0}, {-3.0,-1.0,-1.0}, {-3.0,-1.0, 3.0}, {-3.0, 1.0,-3.0}, {-3.0, 1.0, 1.0}, {-3.0, 3.0,-1.0}, {-1.0,-3.0,-1.0}, {-1.0,-3.0, 3.0}, {-1.0,-1.0,-3.0}, {-1.0,-1.0, 1.0}, {-1.0, 1.0,-1.0}, {-1.0, 1.0, 3.0}, {-1.0, 3.0,-3.0}, {-1.0, 3.0, 1.0}, { 1.0,-3.0,-3.0}, { 1.0,-3.0, 1.0}, { 1.0,-1.0,-1.0}, { 1.0,-1.0, 3.0}, { 1.0, 1.0,-3.0}, { 1.0, 1.0, 1.0}, { 1.0, 3.0,-1.0}, { 1.0, 3.0, 3.0}, { 3.0,-3.0,-1.0}, { 3.0,-1.0,-3.0}, { 3.0,-1.0, 1.0}, { 3.0, 1.0,-1.0}, { 3.0, 1.0, 3.0}, { 3.0, 3.0, 1.0} };
  const int nscoords = sizeof(scoords)/sizeof(scoords[0]);

  // feature coordinates
  const double fcoords[][3] = { {  1.498,  0.000, -4.489 },
				{ -0.560,  0.000, -1.928 },
				{  1.595,  0.000, -3.082 },
				{  2.839,  0.000, -2.555 },
				{  4.236,  0.000, -1.404 },
				{  3.743,  0.000,  0.510 } };
  const int nfcoords = sizeof(fcoords)/sizeof(fcoords[0]);

  // feature data
  const int nfeatures = 297;
  const int featuretyps[] = { 0, 3, 3, 2, 1, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 3, 1, 0, 0, 1, 0, 2, 1, 1, 2, 3, 3, 1, 0, 2, 3, 0, 1, 1, 0, 0, 2, 3, 1, 3, 1, 0, 2, 2, 2, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 2, 0, 3, 2, 2, 1, 1, 3, 3, 2, 1, 0, 0, 0, 2, 2, 2, 3, 0, 3, 2, 2, 3, 0, 0, 3, 0, 1, 3, 2, 0, 1, 2, 2, 1, 0, 3, 2, 2, 3, 1, 1, 3, 0, 0, 1, 0, 1, 2, 1, 0, 2, 1, 1, 0, 0, 2, 3, 1, 1, 3, 0, 0, 2, 3, 1, 0, 0, 1, 0, 2, 0, 3, 1, 3, 3, 1, 3, 2, 3, 3, 2, 3, 0, 3, 2, 2, 3, 2, 1, 0, 2, 3, 3, 2, 0, 0, 3, 3, 2, 1, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 3, 1, 0, 1, 0, 2, 1, 1, 2, 3, 3, 1, 0, 2, 3, 0, 1, 1, 0, 0, 2, 3, 1, 3, 1, 0, 2, 2, 2, 2, 0, 0, 0, 1, 3, 3, 3, 2, 0, 2, 3, 2, 2, 1, 1, 3, 3, 2, 1, 0, 0, 0, 2, 2, 2, 3, 0, 3, 2, 2, 3, 0, 0, 3, 0, 1, 3, 2, 1, 2, 2, 0, 1, 3, 2, 2, 3, 1, 1, 3, 0, 0, 1, 0, 1, 2, 1, 0, 2, 1, 1, 0, 0, 2, 3, 1, 1, 3, 0, 0, 2, 3, 1, 0, 0, 1, 0, 2, 3, 1, 3, 3, 1, 3, 2, 3, 3, 2, 3, 0, 3, 2, 2, 0, 3, 2, 1, 0, 2, 3, 3, };
  const float featurevecs[][297] = {
    { -0.725,  0.274,  0.337,  0.601,  0.236, -0.223, },
    {  0.728,  0.287,  0.452,  0.056,  -0.19,   1.26, },
    {  -1.24,  0.304, -0.337,  0.245,  0.405,  0.648, },
    { -0.069,  0.128,  0.848,  0.827,  0.298, -0.297, },
    {  0.859,  0.952,   0.35,   0.35,  0.471,  0.232, },
    { -0.301, -0.304,  0.906,   0.81,  0.459,  -0.35, },
    {  0.386, -0.335,   1.42,  0.849,  0.126, -0.606, },
    {  -0.12,  0.231,    1.1,  0.899,  0.433, -0.531, },
    { -0.477, -0.212,  0.695,   1.05,  0.149, -0.191, },
    {  -1.22,  0.141,  0.559,      1,  0.219, -0.135, },
    {  -1.16, -0.032,  0.428,   1.01,  0.174, -0.503, },
    {  0.181,   0.04,   1.28,   1.04,  0.466,  -0.39, },
    { -0.263, -0.176,  0.842,  0.695,  0.435, -0.342, },
    { -0.028,  0.389,   1.09,  0.961,  0.383, -0.235, },
    { -0.081,  0.261,   1.14,   1.06,  0.187, -0.122, },
    {  0.763,  0.225,  0.435,  0.191, -0.787,  0.171, },
    { -0.108,  0.441, -0.182, -0.022, -0.043,  0.075, },
    { -0.701,  0.267,   0.73,   1.05,  0.402,  0.054, },
    { -0.357,  0.306,  0.453,  0.981,  0.101, -0.403, },
    {  0.599,  0.401,  0.391,  0.003, -0.328,  0.087, },
    { -0.565,  0.371,  0.719,   1.15,  0.468,   0.23, },
    {  0.018,  0.096,  0.947,   1.13,   0.51, -0.097, },
    { -0.418,  0.366, -0.507, -0.501, -0.491, -0.025, },
    {  0.179,  0.518,  0.227,  0.123,  -0.33, -0.042, },
    {  0.216,  0.161,   1.28,   1.17,  0.574, -0.348, },
    { -0.726,   1.17,  -0.03, -0.369, -0.062,  0.745, },
    {  0.015,  0.697,  0.022, -0.072, -0.248,  0.403, },
    { -0.009,  0.406,   0.09,  0.372, -0.072,  -0.08, },
    { -0.852, -0.018,  0.311,  0.538,  0.186, -0.343, },
    {  0.631,  0.048,   1.27,   1.36,  0.567, -0.164, },
    { -0.273, -0.061,  0.183,  0.124, -0.221,  0.223, },
    {  -1.36,  0.025,  0.281,  0.476,  0.033, -0.489, },
    {  -0.17,  0.295,  0.135,   0.13, -0.278,  0.285, },
    {  0.062,  0.375,  0.005,  0.249,  0.212,  0.087, },
    {  -1.26,   -0.4,  0.507,  0.878,  0.128, -0.307, },
    { -0.574,  0.107,   1.22,   1.39,  0.426, -0.192, },
    {  0.302,  0.021,   1.59,   1.43,  0.524, -0.474, },
    { -0.663,  0.646, -0.185, -0.083, -0.027,  0.277, },
    {   0.43,  0.382,  0.605,  0.371,  0.089,  0.197, },
    {  0.625,  0.197,   0.46,   0.28,  0.154,  0.166, },
    {  0.032,  0.413,  0.253,  0.292, -0.067, -0.065, },
    { -0.632,  0.273,  0.604,  0.957,   0.42, -0.226, },
    {  0.159,  0.376,    1.3,   1.15,  0.405,  0.086, },
    {  0.031,  0.203,    1.3,   1.05,  0.299, -0.107, },
    {  0.373,   0.08,   1.48,   1.19,  0.374, -0.312, },
    {   0.04, -0.125,   1.28,   1.24,   0.52, -0.296, },
    { -0.493,   0.22,  0.561,  0.876,  0.423, -0.021, },
    { -0.544,  0.321,   1.04,   1.19,  0.329, -0.131, },
    {  -1.04, -0.005,  0.661,   1.24,  0.424, -0.542, },
    {  0.061,  0.569,  0.225, -0.046, -0.228,  0.203, },
    {  0.792,  0.262,  0.138, -0.209, -0.831,  0.445, },
    {  0.385,  0.205, -0.067,  0.065, -0.391,  0.181, },
    {  0.968,  0.121,  0.436,  0.351,  0.193,  0.184, },
    {  0.108,  0.045,      1,   1.06,  0.499, -0.363, },
    { -0.996,   -0.1,  0.106,  0.475,  0.275, -0.388, },
    {  0.312, -0.047,  0.951,  0.618,  0.369, -0.189, },
    {  0.545, -0.123,  0.735,   0.63,  0.156, -0.523, },
    { -0.099,  0.005,  0.236,  0.338, -0.554,  0.219, },
    {  0.221,  0.024,   1.57,   1.51,  0.645, -0.172, },
    {  0.243,  0.285,   1.45,   1.19,  0.443, -0.092, },
    {  0.207, -0.552,  0.552,  0.823, -0.518,  0.386, },
    { -0.692,  0.611, -0.256, -0.217, -0.163, -0.044, },
    {  -1.13,  0.629, -0.516,  -0.36,  0.088,  0.475, },
    { -0.298,  0.937,  0.165,  0.326, -0.197,   1.02, },
    {  0.561,  0.446,    1.4,    1.2,  0.694,  0.396, },
    {  0.022,  0.278, -0.094, -0.438, -0.449, -0.123, },
    { -0.921,  0.164,  0.524,  0.891,  0.261, -0.508, },
    { -0.641,   0.31,  0.877,      1,  0.137, -0.069, },
    { -0.703,  0.097,  0.845,  0.805,   0.45, -0.514, },
    {  0.012,  0.211,   1.19,  0.985,  0.395, -0.358, },
    {  0.115,   -0.1,    1.1,  0.593,  0.432, -0.624, },
    {  0.346, -0.398,   1.23,   1.17,  0.713,  -0.53, },
    { -0.358,  0.228, -0.161, -0.123, -0.302,  0.783, },
    {  -0.35,  0.358,  0.881,   1.22,  0.416,  0.198, },
    { -0.832,   1.17, -0.135, -0.238, -0.226,      1, },
    {  -0.56,  -0.14,   0.67,  0.668,  0.353, -0.323, },
    {  0.146,  0.032,  0.935,  0.919,  0.626, -0.208, },
    { -0.557,  0.318,  0.243, -0.077, -0.079,  0.447, },
    { -0.478,  0.927,   1.16,   1.33,  0.234, -0.398, },
    { -0.628,  0.007,  0.768,   1.44,  0.071, -0.272, },
    { -0.543,   1.16, -0.133, -0.145, -0.046,  0.878, },
    { -0.428, -0.333,  0.657,   1.39,  0.825, -0.311, },
    {  0.619,  0.319,  0.108,   0.05,   0.01,  0.211, },
    { -0.317,  0.302,  0.136,  0.193, -0.013,  0.233, },
    { -0.048,  0.176,   1.23,    1.2,  0.513, -0.173, },
    {  -1.02,  0.003,  0.525,  0.792,  0.182,  -0.49, },
    {  0.005,  0.402,  0.415,  0.287, -0.278, -0.124, },
    {  0.009,  0.119,   1.04,  0.912,  0.126, -0.122, },
    {  0.122, -0.129,   1.14,   1.03,  0.217, -0.167, },
    {  -1.13,  0.375, -0.571, -0.502, -0.718,   0.01, },
    {  -1.06, -0.143,  0.385,  0.652,  0.066, -0.077, },
    {  -1.34,  0.649, -0.168, -0.165,  0.325,  0.702, },
    { -0.167,  0.517,   0.99,   1.09,  0.424, -0.237, },
    { -0.567, -0.278,   1.15,   1.11,  0.156,  -0.65, },
    {  0.115,  0.137,  0.328,  0.075, -0.699,  0.346, },
    {  0.183,  0.269,  0.118, -0.167, -0.125,  0.054, },
    { -0.011,  0.056,  0.136,  0.304,  0.064,  0.286, },
    {  0.549,  0.588,  0.411,  0.494, -0.132,  0.334, },
    { -0.846,  0.096,  0.723,  0.943,  0.353, -0.004, },
    { -0.252,  0.281,  0.937,   1.21,  0.533, -0.514, },
    {  -1.07,  0.292, -0.685, -0.377, -0.126,  0.131, },
    { -0.668,  0.063,  0.673,  0.784,  0.222, -0.549, },
    {  0.194,  0.036,  0.481,  0.376,  0.037,  0.251, },
    {  0.017,  0.025,  0.945,  0.836,  0.623, -0.349, },
    { -0.443, -0.596, -0.026,  0.033, -0.587, -0.172, },
    { -0.438, -0.072,  0.655,  0.854,  0.204, -0.555, },
    {  0.573, -0.017,  0.802,  0.928,  0.328, -0.512, },
    {  0.253,  0.462,  0.625,  0.257,  -0.05, -0.129, },
    {   1.23,    1.1,  0.749,  -0.06, -0.537,  0.419, },
    { -0.611,  0.137,  0.629,   1.03,   0.88,  0.632, },
    { -0.756,  0.418,  0.629,  0.671, -0.186, -0.536, },
    {  0.115, -0.051,   1.25,   1.25,  0.323, -0.289, },
    {  0.024,  0.041,  0.235,  0.118,  0.169,  0.206, },
    {   1.29,  0.357,  0.616, -0.156,  0.058,   0.23, },
    {  0.735,  0.439,  0.872,    0.6,  -0.21,  0.222, },
    { -0.249,  0.489, -0.037, -0.442, -0.715,  0.215, },
    {  -1.22, -0.188,  0.858,   1.05,  0.455, -0.219, },
    { -0.402,  0.243,  0.852,   1.12,  0.224, -0.557, },
    {  0.277,  0.258,   1.45,   1.14,  0.335, -0.308, },
    { -0.523, -0.032, -0.271, -0.088, -0.047,  0.247, },
    { -0.325,  0.406,  0.079, -0.015, -0.109,   0.13, },
    {  -0.42, -0.094,  0.808,   0.97,  0.496, -0.445, },
    { -0.654, -0.191,  0.521,  0.732,  0.368, -0.387, },
    {  0.228,  0.554,  0.328,  0.252,  0.073,  0.073, },
    { -0.332,  0.123,  0.531,  0.702,  0.123, -0.392, },
    {  0.056, -0.205,   0.81,  0.859,  0.424, -0.464, },
    { -0.691,  0.141,  0.442,  0.686,  0.287,   -0.2, },
    {  -1.03,  0.787, -0.201, -0.407,  -0.18,  0.659, },
    {  -1.12,   0.68, -0.674, -0.005,   1.41,  0.217, },
    { -0.231,  0.631,  -0.02, -0.347, -0.498,  0.636, },
    { -0.876,  0.416, -0.419, -0.121, -0.063,  0.297, },
    { -0.175,  0.479,  0.434,  0.661,  0.571,  0.444, },
    { -0.569,  0.548, -0.068,  0.221,  0.157,   0.51, },
    {  0.212,  0.008,    1.1,      1,  0.527, -0.278, },
    {  0.069, -0.106,  0.162,  0.064,  0.346,  0.217, },
    {  -0.59,  0.399,  -0.11,  0.274,  0.226,  0.415, },
    { -0.047,  0.094,  0.788,  0.698,  0.357,  -0.13, },
    { -0.525,  0.255, -0.047, -0.146, -0.164,  0.054, },
    { -0.979, -0.247,  0.338,  0.651,  -0.05, -0.202, },
    {  -0.84,  0.852,  0.046,  0.648,  0.027,  0.317, },
    { -0.275, -0.239,    1.3,   0.92,  0.022, -0.461, },
    {  0.012,  0.016,  0.949,  0.893,  0.611, -0.109, },
    {  0.569,  0.406,  0.352,  0.359, -0.079,   0.48, },
    {  0.188, -0.081,   1.19,   1.04,  0.472, -0.145, },
    { -0.603,   0.25,  0.339,  0.037, -0.922,  0.231, },
    {   -1.5, -0.424,  0.239,  0.659,  0.208, -0.675, },
    { -0.006,  0.056,  0.989,  0.913,  0.226, -0.351, },
    {  0.125,  0.129,  0.867,  0.289, -0.202,  0.172, },
    { -0.442,   0.59,  0.027,  0.776,  0.644,  0.168, },
    {  0.187, -0.014,    1.1,  0.959,  0.211, -0.541, },
    {  -1.14,  0.048,   0.48,  0.892,  0.042, -0.554, },
    { -0.876,  0.223,  0.479,  0.686,    0.3, -0.126, },
    { -0.976,   1.11, -0.016,   -0.2, -0.079,  0.956, },
    {   1.12,  0.002,   1.33,   1.27,   0.62,  0.271, },
    {  0.352,   0.12,   1.17,  0.884,  0.397, -0.147, },
    { -0.099,  0.732,  0.044, -0.011,  0.136,  0.311, },
    { -0.635, -0.417,  0.969,  0.913,  0.235, -0.412, },
    {  0.183, -0.231,   1.03,  0.512,  -0.03, -0.792, },
    {  0.032,   0.05,   1.13,   0.83,  0.266, -0.515, },
    { -0.422, -0.135,  0.754,   1.25,  0.302,   -0.3, },
    { -0.569,  0.215,  0.957,   0.95,  0.249,  0.077, },
    {  -1.31,   0.01,  0.188,  0.802, -0.064, -0.705, },
    { -0.763,  0.167,  0.639,  0.723,  0.639, -0.391, },
    { -0.014, -0.328,   1.06,  0.833,  0.361, -0.075, },
    {  0.221,  0.198,   0.89,  0.692,  0.421, -0.184, },
    { -0.193,  0.095,   1.01,      1,  0.303, -0.294, },
    {  0.904,  0.567,  0.263,  0.102, -0.561,  0.394, },
    {   1.25,  0.081,  0.561,  0.272,  0.029,  0.035, },
    { -0.535,  0.386,   1.06,   1.21,  0.407,  0.057, },
    {   1.82,  0.211,  0.712, -0.203, -0.593,  0.004, },
    {  -0.97,  0.555,  0.337,  0.802,  0.309,  0.306, },
    {   0.25,  0.016,   1.41,   1.44,  0.489, -0.346, },
    { -0.209,  0.515, -0.235, -0.209, -0.265,  0.183, },
    { -0.226,  0.438,  0.267,  0.058,  0.004,  0.107, },
    {  0.341,  0.166,   1.37,   1.29,  0.578,   0.11, },
    { -0.733,   0.79, -0.068, -0.239, -0.189,  0.902, },
    { -0.222,  0.561,  0.084,  0.469,  0.143,  0.167, },
    {  0.892,  0.229,  0.715,  0.467, -0.066, -0.067, },
    { -0.826,  0.104,   0.23,  0.627,  0.619,  0.037, },
    { -0.095,  0.035,  0.851,  0.811,  0.473, -0.214, },
    { -0.353,   0.25,  0.031,  0.047, -0.157,  0.573, },
    {  -1.27, -0.058,  0.351,  0.647,  0.137, -0.545, },
    {  -0.32, -0.017,  0.113,  0.152, -0.307,   0.33, },
    {  0.013,  0.438, -0.025,  0.168,  0.226,  0.282, },
    {  -1.08, -0.184,  0.542,  0.936,  0.386,  -0.43, },
    {  -0.68,  0.097,   1.31,   1.61,  0.472, -0.203, },
    {  0.146,  0.077,   1.47,   1.31,  0.526, -0.448, },
    { -0.494,   0.37, -0.331, -0.054,  0.115,  0.212, },
    {  0.711,  0.422,  0.322,  0.023, -0.034,  0.104, },
    {   1.33,  0.168,  0.835,  0.322,  0.258,   0.21, },
    {  0.691, -0.215,  0.084,   0.03,  0.093,  0.076, },
    { -0.869,  0.032,  0.376,  0.661,  0.426, -0.295, },
    {  0.076,  0.344,   1.15,   1.16,  0.417, -0.006, },
    {  0.123,  0.142,   1.24,   1.01,  0.259, -0.307, },
    {  0.372,   0.07,   1.42,   1.12,  0.429, -0.318, },
    {  0.018, -0.098,   1.24,   1.23,  0.501,  -0.28, },
    { -0.559,  0.294,  0.631,  0.958,  0.315,   -0.1, },
    { -0.719,  0.359,   0.89,   1.06,  0.106,  -0.09, },
    {  -1.21, -0.189,  0.483,   1.28,  0.214, -0.558, },
    {  0.352,  0.279,  0.127, -0.142, -0.078,  0.126, },
    {  0.484,  0.371, -0.278, -0.417, -0.561,  0.507, },
    {  0.799,  0.096,  0.135,  0.044, -0.554,  0.209, },
    {  -0.24,  0.211, -0.073,  0.128,  0.166,  0.076, },
    {  0.174,  0.001,   1.05,  0.991,  0.473, -0.104, },
    { -0.578, -0.114,  0.389,  0.472,  0.373, -0.544, },
    {   0.08,  0.028,    0.8,  0.666,  0.259, -0.191, },
    {  0.042, -0.141,  0.126,  0.279, -0.598,  0.121, },
    {   0.06, -0.189,   1.43,   1.51,  0.642, -0.207, },
    { -0.079,  0.045,   1.08,   1.03,  0.521,   0.07, },
    {    0.2,    0.9,  0.153, -0.119,  0.215,  0.524, },
    { -0.926,   0.51, -0.158,  0.054, -0.187, -0.053, },
    {  -1.21,  0.592, -0.297,  0.024,   0.02,  0.262, },
    {  0.847,  0.891,  0.131, -0.445,  -0.25,  0.966, },
    {  0.359,  0.568,   1.32,   1.19,  0.533,   0.07, },
    {  -0.04, -0.147, -0.298, -0.305, -0.074,  0.035, },
    {   -0.7, -0.135,   1.03,   1.34,  0.461, -0.779, },
    { -0.724,  0.256,  0.806,   1.06,  0.128,  0.008, },
    { -0.907,  0.227,  0.796,   0.79,  0.279, -0.481, },
    {  0.099,  0.034,   1.28,   1.12,   0.39, -0.299, },
    {  0.186, -0.028,   1.26,  0.647,  0.291, -0.685, },
    { -0.374, -0.161,   1.03,   1.04,  0.368, -0.609, },
    { -0.137,  0.809,   0.34,  0.187,  -0.16,  0.686, },
    { -0.581,  0.405,  0.821,   1.27,  0.506,  0.331, },
    {  -0.81,   1.32, -0.047, -0.173, -0.095,  0.926, },
    { -0.217, -0.138,   1.02,  0.633,  0.441, -0.229, },
    {  0.187,  0.016,   1.03,  0.985,  0.741, -0.129, },
    {  -0.43,  0.379,  0.032, -0.146,  -0.08,  0.415, },
    { -0.895,  0.474,  0.554,   1.07,  0.246, -0.401, },
    { -0.733, -0.105,  0.648,   1.37,  0.193, -0.198, },
    { -0.752,   1.47,  0.032, -0.145,  0.058,   1.18, },
    { -0.699, -0.198,  0.989,   1.81,   1.07, -0.191, },
    {  0.508,  0.425,  0.013,  -0.06,  0.086,  0.335, },
    {   1.13,  0.333,  0.866,  0.416,  0.229,  0.351, },
    {  0.097,  0.037,   1.05,   1.05,  0.506, -0.325, },
    {  0.049,  0.073,  0.411,  0.427, -0.148,  0.052, },
    { -0.238,  0.134,  0.876,  0.939,  0.358, -0.397, },
    {  0.058,  0.045,   1.08,   1.02,  0.353, -0.071, },
    { -0.603, -0.203,   0.56,  0.743,   0.14, -0.436, },
    {  -1.01,  0.397, -0.195,  0.125,  -0.43, -0.159, },
    { -0.979,   1.09,   0.02, -0.083, -0.043,  0.926, },
    { -0.241,  0.424,  0.999,   1.06,  0.614, -0.297, },
    { -0.412, -0.325,   1.01,   1.16,  0.065, -0.627, },
    {  0.172,  0.349,  0.645,   0.35, -0.517,  0.371, },
    {  0.317,  0.378,  0.118, -0.061, -0.307, -0.022, },
    {  0.919,  0.351,  0.607,  0.403,  0.094,  0.201, },
    {  0.685,  0.361,  0.479,  0.635, -0.398,  0.074, },
    { -0.353,  0.444,  0.897,   1.21,  0.374, -0.126, },
    { -0.504, -0.076,  0.808,    1.2,  0.428, -0.099, },
    { -0.061,  0.339,  0.041, -0.084, -0.105,  0.561, },
    { -0.489,  0.113,   0.73,   0.73,  0.192, -0.506, },
    { -0.263, -0.278, -0.038,  0.122, -0.018,  0.046, },
    { -0.103, -0.049,   1.03,   1.01,  0.688, -0.215, },
    {  0.091, -0.682, -0.163, -0.414, -0.409, -0.025, },
    { -0.709,  0.168,  0.652,   1.02,  0.437, -0.681, },
    {  0.213,  0.109,   1.22,   1.17,  0.462, -0.266, },
    {  0.119, -0.083,  0.103,  0.009, -0.293,  0.028, },
    {   1.33,  0.146,  0.689, -0.265, -0.435, -0.185, },
    { -0.184,  0.528,  0.745,  0.705,  0.022, -0.621, },
    { -0.497,  0.201,  0.749,   1.11,  0.345,  0.029, },
    {   0.16,  0.049,    1.3,   1.21,  0.189, -0.473, },
    { -0.099,  0.358,  0.531,  0.346, -0.048,   0.38, },
    {   1.57,  0.069,  0.825,  0.061,  0.129,  0.402, },
    {   1.06,  0.466,   1.32,  0.818, -0.056,  0.156, },
    { -0.367,  0.384, -0.102, -0.562,  -0.77,  0.305, },
    { -0.923, -0.085,  0.988,   1.12,  0.288,  -0.12, },
    { -0.698, -0.004,  0.963,   1.17,  0.388, -0.554, },
    { -0.126,  0.305,   1.16,   1.08,  0.404, -0.045, },
    { -0.284,  -0.01,  0.214,  0.288,  0.128,  0.399, },
    {  0.156,   0.27,  0.229,  0.111, -0.051,  0.095, },
    {  -0.78,  0.058,  0.514,    0.8,  0.504, -0.364, },
    { -0.426, -0.151,  0.577,  0.761,   0.22, -0.559, },
    {  0.012, -0.145,  0.295,  0.364, -0.228,  0.027, },
    { -0.498,  0.184,  0.591,  0.935,  0.259, -0.354, },
    { -0.102,  0.058,  0.958,  0.941,  0.354, -0.343, },
    { -0.988,  0.904, -0.252,  -0.37, -0.223,  0.567, },
    { -0.078,  0.322,  0.089,  0.727,  0.435,  0.155, },
    {  -1.31,   1.26, -0.308, -0.399, -0.108,  0.746, },
    {  -1.25,  0.388, -0.552,  -0.25,  0.171,  0.134, },
    { -0.793,   0.45, -0.271, -0.009,  0.157,  0.205, },
    { -0.693,  0.414, -0.081,  0.211, -0.015,  0.621, },
    {  0.323,  0.099,   1.23,   1.19,  0.683, -0.266, },
    {  0.053, -0.168,  0.281,  0.259,  0.446,  0.211, },
    { -0.877,  0.477,  -0.41, -0.131, -0.023,  0.574, },
    {  0.128,  0.068,   1.02,  0.838,  0.412, -0.093, },
    { -0.296,  0.245, -0.139, -0.111, -0.021, -0.115, },
    {  -1.18, -0.134,  0.662,   1.31,  0.364, -0.077, },
    {  -1.09,  0.883,   -0.4,  0.244,  0.033,  0.219, },
    { -0.475, -0.201,  0.956,  0.787,  0.197, -0.354, },
    {  0.816, -0.015,   1.31,  0.846,  0.551, -0.107, },
    { -0.027,  -0.08,   1.03,  0.675,  0.347, -0.504, },
    {  0.052, -0.017,  0.508,  0.574, -0.273,  0.475, },
    {  0.329, -0.034,   1.11,   1.15,  0.567, -0.215, },
    {    0.4,  0.514,  0.046, -0.066, -0.359, -0.405, },
    { -0.599,  0.052,  0.713,  0.742,  0.326,  -0.73, },
    {  0.289,  0.377,   1.57,   1.35,  0.738,  0.085, },
    { -0.168,  0.419, -0.214, -0.315, -0.696,  0.077, },
    { -0.103,  0.618,  0.521, -0.014, -0.805,  0.308, },
  };
  const float featureprbs[4][4] = {
    {   0.74,  0.016,  0.224,  0.016, },
    {  0.036,  0.474,  0.039,  0.421, },
    {  0.183,  0.005,  0.708,  0.003, },
    {  0.042,  0.505,  0.029,   0.56, },
  };

  // accumulate feature vectors
  std::vector<std::vector<float> > resultvecs( rtops.size() );
  for ( int r = 0; r < rtops.size(); r++ ) {
    std::vector<float> resultvec( nfcoords, 0.0 );
    if ( !rtops[r].is_null() ) {
      float s0(0.0), s1(0.0), s2(0.0);
      for ( int i = 0; i < nscoords; i++ ) {
	clipper::Coord_orth co( scoords[i][0], scoords[i][1], scoords[i][2] );
	float rho =
	  xmap.interp<clipper::Interp_cubic>( xmap.coord_map( rtops[r]*co ) );
	s0 += 1.0;
	s1 += rho;
	s2 += rho*rho;
      }
      s1 /= s0;
      s2 /= s0;
      s2 = sqrt( s2 - s1*s1 );
      //s1 = xref.interp<clipper::Interp_cubic>( (rtops[r]*clipper::Coord_orth(0.0,0.0,0.0)).coord_frac(xref.cell()) );
      for ( int i = 0; i < nfcoords; i++ ) {
	clipper::Coord_orth co( fcoords[i][0], fcoords[i][1], fcoords[i][2] );
	float rho =
	  xmap.interp<clipper::Interp_cubic>( xmap.coord_map( rtops[r]*co ) );
	resultvec[i] = ( rho - s1 ) / s2;
      }
    }
    resultvecs[r] = resultvec;
  }

  // now calculate results
  std::vector<std::vector<double> > results( resultvecs.size() );
  int nvote = nfeatures/4;
  for ( int i = 0; i < resultvecs.size(); i++ ) {
    // accumulate votes
    std::vector<std::pair<float,int> > votes;
    for ( int j = 0; j < nfeatures; j++ ) {
      if ( i != j ) {
	float s2 = 0.0;
	for ( int k = 0; k < nfcoords; k++ )
	  s2 += pow(featurevecs[j][k]-resultvecs[i][k],2.0);
	votes.push_back( std::pair<float,int>( s2, featuretyps[j] ) );
      }
    }
    std::sort( votes.begin(), votes.end() );
    // count votes
    std::vector<double> votecounts(4,0.0);
    for ( int k = 0; k < nvote; k++ ) votecounts[votes[k].second]++;
    for ( int k = 0; k < 4; k++ ) votecounts[k] /= double(nvote);
    // convert votes to probabilities
    std::vector<double> scores(4,0.0);
    for ( int j = 0; j < 4; j++ )
      for ( int k = 0; k < 4; k++ )
	scores[j] += featureprbs[j][k]*votecounts[k];
    results[i] = scores;
  }

  return results;
}



/*! Returning highest scoring subsequence matching the given sequence
  to the supplied LLK scores. */
std::pair<double,clipper::String> NucleicAcidSequence::sequence_score( const std::vector<std::vector<double> >& scores, const clipper::String& subseq )
{
  // accumulate scores
  std::vector<double> score( scores.size(), 0.0 );
  for ( int r = 0; r < scores.size(); r++ ) {
    int t = NucleicAcidTools::base_index_translate( subseq[r] );
    if ( t >= 0 ) score[r] = scores[r][t];  // add residue z-score
  }
  // calculate cumulative score
  std::vector<double> sccum( scores.size()+1 ), scwt( scores.size()+1 );
  sccum[0] = 0.0;
  for ( int r = 0; r < score.size(); r++ ) sccum[r+1] = sccum[r]+score[r];
  for ( int r = 0; r < scwt.size(); r++ ) {
    double l1 = double(r)/20.0;
    scwt[r] = 1.0/pow(1.0+l1*l1,0.25);
  }
  // now find grestest subsequence score
  int minseq = 1;
  clipper::String seqmin = "";
  double scmin = 0.0;
  for ( int r1 = 0; r1 < sccum.size()-minseq; r1++ )
    for ( int r2 = r1+minseq; r2 < sccum.size(); r2++ ) {
      // double sc = (sccum[r2]-sccum[r1]) + 1.5*sqrt( double(r2-r1+1 ) );
      double sc = ( sccum[r2]-sccum[r1] ) * scwt[r2-r1];
      if ( sc < scmin ) {
	seqmin = subseq;
	for ( int r = 0 ; r < r1           ; r++ ) seqmin[r] = '?';
	for ( int r = r2; r < subseq.size(); r++ ) seqmin[r] = '?';
	scmin = sc;
      }
    }
  std::pair<double,clipper::String> result( scmin, seqmin );
  return result;
}


// Return best sequence for a chain
clipper::String NucleicAcidSequence::sequence_chain( const clipper::Xmap<float>& xmap, const clipper::MChain& chain, const clipper::MMoleculeSequence& seq )
{
  const int nres = chain.size();
  const int ntyp = 4;

  // calculate rtops
  std::vector<clipper::RTop_orth> rtops( nres );
  for ( int r = 0; r < nres; r++ ) rtops[r] = base_rtop( chain[r], xmap );

  // calculate scores
  std::vector<std::vector<double> > scores = score( xmap, rtops );

  // convert to -log-likelihood form
  const double rmin = exp(-3.0);
  for ( int i = 0; i < scores.size(); i++ )
    for ( int j = 0; j < scores[i].size(); j++ )
      scores[i][j] = -log( std::max(scores[i][j],rmin) );

  // normalise down columns by mean and variance to get z-scores
  double s0, s1, s2;
  s0 = double( nres );
  for ( int t = 0; t < ntyp; t++ ) {
    s1 = s2 = 0.0;
    for ( int r = 0; r < nres; r++ ) {
      s1 += scores[r][t];
      s2 += scores[r][t]*scores[r][t];
    }
    s1 /= s0;
    s2 /= s0;
    s2 = sqrt( s2 - s1*s1 );
    for ( int r = 0; r < nres; r++ )
      scores[r][t] = ( scores[r][t] - s1 ) / s2;
  }

  // create sequences and score
  const int omin = 5;
  std::vector<std::pair<double,clipper::String> > seqscores;
  for ( int s = 0; s < seq.size(); s++ ) {
    clipper::String curseq = seq[s].sequence();
    int o1 = omin-nres;
    int o2 = curseq.length()-omin;
    for ( int o = o1; o <= o2; o++ ) {
      clipper::String subseq = "";
      for ( int r = 0; r < chain.size(); r++ ) {
	int spos = r+o;
	if ( spos >= 0 && spos < curseq.length() )
	  subseq += curseq[spos];
	else
	  subseq += "?";
      }
      const std::pair<double,clipper::String>
	seqscore = sequence_score( scores, subseq );
      if ( seqscore.first < 0.0 ) seqscores.push_back( seqscore );
    }
  }

  if ( seqscores.size() > 0 ) {
    // if only one sequence found, assign it
    if ( seqscores.size() == 1 ) return seqscores[0].second;
    // else sort and test
    std::sort( seqscores.begin(), seqscores.end() );
    int inext;
    for ( inext = 1; inext < seqscores.size()-1; inext++ )
      if ( sequence_similarity( seqscores[0].second, seqscores[inext].second )
	   < 0.75 ) break;
    if ( seqscores[0].first - seqscores[inext].first < -1.0 )
      return seqscores[0].second;
  }
  return clipper::String( std::string( chain.size(), '?' ) );
}


clipper::MiniMol NucleicAcidSequence::sequence( const clipper::Xmap<float>& xmap, const clipper::MiniMol& mol, const clipper::MMoleculeSequence& seq ) const
{
  clipper::MiniMol mol_new = mol;
  for ( int c = 0; c < mol_new.size(); c++ ) {
    if ( !mol_new[c].exists_property( "NON-NA" ) ) {
      clipper::String chnseq = sequence_chain( xmap, mol_new[c], seq );
      std::cout << chnseq.size() << " " << mol_new[c].size() << " " << chnseq << std::endl;
      if ( chnseq.find_first_not_of( "?" ) != std::string::npos )
	for ( int r = 0; r < mol_new[c].size(); r++ )
	  mol_new[c][r].set_type( chnseq.substr(r,1) );
    }
  }
  return mol_new;
}
